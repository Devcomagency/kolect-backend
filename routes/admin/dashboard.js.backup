const express = require('express');
const pool = require('../../config/database');
const { verifyAdmin } = require('../../middleware/adminAuth');
const router = express.Router();

// Statistiques principales avec donn√©es r√©elles
router.get('/stats', verifyAdmin, async (req, res) => {
  try {
    console.log('üìä R√©cup√©ration stats admin...');

    // 1. SIGNATURES TOTALES (tester plusieurs colonnes possibles)
    const totalSignatures = await pool.query(`
      SELECT 
        SUM(COALESCE(total_signatures, signatures, 0)) as total,
        COUNT(*) as total_scans
      FROM scans 
      WHERE created_at >= CURRENT_DATE - INTERVAL '30 days'
    `);

    // 2. SIGNATURES AUJOURD'HUI VS HIER
    const todayStats = await pool.query(`
      SELECT 
        SUM(CASE WHEN DATE(created_at) = CURRENT_DATE THEN COALESCE(total_signatures, signatures, 0) ELSE 0 END) as today,
        SUM(CASE WHEN DATE(created_at) = CURRENT_DATE - 1 THEN COALESCE(total_signatures, signatures, 0) ELSE 0 END) as yesterday
      FROM scans
    `);

    // 3. COLLABORATEURS ACTIFS
    const collaboratorsStats = await pool.query(`
      SELECT 
        COUNT(DISTINCT COALESCE(collaborator_id, user_id)) as active_collaborators,
        COUNT(DISTINCT CASE WHEN created_at >= CURRENT_DATE THEN COALESCE(collaborator_id, user_id) END) as active_today
      FROM scans 
      WHERE created_at >= CURRENT_DATE - INTERVAL '7 days'
        AND COALESCE(collaborator_id, user_id) IS NOT NULL
    `);

    // 4. QUALIT√â MOYENNE
    const qualityStats = await pool.query(`
      SELECT 
        AVG(COALESCE(quality, 0)) as avg_quality,
        AVG(COALESCE(confidence, ocr_confidence, 0)) as avg_confidence
      FROM scans 
      WHERE created_at >= CURRENT_DATE - INTERVAL '7 days'
        AND COALESCE(quality, confidence, ocr_confidence) IS NOT NULL
    `);

    // 5. VRAIES INITIATIVES depuis la table initiatives avec stats
    const realInitiatives = await pool.query(`
      SELECT 
        i.id,
        i.name,
        i.description,
        i.status,
        i.target_signatures,
        i.deadline,
        i.total_signatures as collected_signatures,
        i.total_scans as scan_count,
        i.active_collaborators
      FROM initiatives i
      ORDER BY i.total_signatures DESC
    `);

    // 6. TOP COLLABORATEURS avec vraies donn√©es
    const topCollaborators = await pool.query(`
      SELECT 
        c.id,
        COALESCE(c.first_name || ' ' || c.last_name, c.email, 'Collaborateur #' || c.id) as name,
        c.email,
        COUNT(s.id) as scan_count,
        SUM(COALESCE(s.total_signatures, s.signatures, 0)) as total_signatures,
        AVG(COALESCE(s.quality, 0)) as avg_quality,
        MAX(s.created_at) as last_scan
      FROM collaborators c
      LEFT JOIN scans s ON c.id = COALESCE(s.collaborator_id, s.user_id) 
        AND s.created_at >= CURRENT_DATE - INTERVAL '30 days'
      WHERE c.is_active = true OR c.is_active IS NULL
      GROUP BY c.id, c.first_name, c.last_name, c.email
      HAVING COUNT(s.id) > 0
      ORDER BY total_signatures DESC
      LIMIT 10
    `);

    // Calculs pour dashboard
    const today = parseInt(todayStats.rows[0]?.today) || 0;
    const yesterday = parseInt(todayStats.rows[0]?.yesterday) || 0;
    const growthPercent = yesterday > 0 ? ((today - yesterday) / yesterday * 100) : 0;

    const stats = {
      totalSignatures: parseInt(totalSignatures.rows[0]?.total) || 0,
      totalScans: parseInt(totalSignatures.rows[0]?.total_scans) || 0,
      
      todaySignatures: today,
      yesterdaySignatures: yesterday,
      growthPercent: Math.round(growthPercent * 10) / 10,
      
      activeCollaborators: parseInt(collaboratorsStats.rows[0]?.active_collaborators) || 0,
      activeToday: parseInt(collaboratorsStats.rows[0]?.active_today) || 0,
      
      avgQuality: Math.round(parseFloat(qualityStats.rows[0]?.avg_quality) || 0),
      avgConfidence: Math.round(parseFloat(qualityStats.rows[0]?.avg_confidence) || 0),
      
      // Vraies initiatives (depuis table initiatives)
      realInitiatives: realInitiatives.rows.map(row => ({
        id: row.id,
        name: row.name || 'Initiative sans nom',
        description: row.description || '',
        status: row.status || 'active',
        target: parseInt(row.target_signatures) || 0,
        collected: parseInt(row.collected_signatures) || 0,
        progress: row.target_signatures > 0 ?
          Math.round((parseInt(row.collected_signatures) || 0) / row.target_signatures * 100) : 0,
        deadline: row.deadline,
        scanCount: parseInt(row.scan_count) || 0,
        activeCollaborators: parseInt(row.active_collaborators) || 0
      })),
      
      topCollaborators: topCollaborators.rows.map(row => ({
        id: row.id,
        name: row.name,
        email: row.email || '',
        scanCount: parseInt(row.scan_count) || 0,
        signatures: parseInt(row.total_signatures) || 0,
        avgQuality: Math.round(parseFloat(row.avg_quality) || 0),
        lastScan: row.last_scan
      }))
    };

    console.log('‚úÖ Stats calcul√©es:', {
      total: stats.totalSignatures,
      today: stats.todaySignatures,
      collaborators: stats.activeCollaborators,
      initiatives: stats.realInitiatives.length
    });

    res.json(stats);

  } catch (error) {
    console.error('‚ùå Erreur stats dashboard:', error);
    res.status(500).json({
      message: 'Erreur r√©cup√©ration stats',
      debug: error.message
    });
  }
});

// Activit√© r√©cente d√©taill√©e
router.get('/recent-activity', verifyAdmin, async (req, res) => {
  try {
    const recentScans = await pool.query(`
      SELECT 
        s.id,
        COALESCE(s.total_signatures, s.signatures, 0) as signatures_detected,
        COALESCE(s.quality, 0) as quality_score,
        COALESCE(s.confidence, s.ocr_confidence, 0) as confidence_score,
        COALESCE(s.initiative, 'Non d√©finie') as initiative_name,
        s.created_at,
        COALESCE(c.first_name || ' ' || c.last_name, c.email, 'Collaborateur #' || COALESCE(s.collaborator_id, s.user_id)) as collaborator_name,
        c.email as collaborator_email
      FROM scans s
      LEFT JOIN collaborators c ON c.id = COALESCE(s.collaborator_id, s.user_id)
      ORDER BY s.created_at DESC
      LIMIT 20
    `);

    const activity = recentScans.rows.map(scan => ({
      id: scan.id,
      collaborator: scan.collaborator_name || 'Inconnu',
      email: scan.collaborator_email || '',
      signatures: scan.signatures_detected || 0,
      quality: Math.round(scan.quality_score || 0),
      confidence: Math.round(scan.confidence_score || 0),
      initiative: scan.initiative_name || 'Non d√©finie',
      timestamp: scan.created_at,
      timeAgo: getTimeAgo(scan.created_at)
    }));

    res.json(activity);

  } catch (error) {
    console.error('‚ùå Erreur activit√© r√©cente:', error);
    res.status(500).json({
      message: 'Erreur r√©cup√©ration activit√©',
      debug: error.message
    });
  }
});

// Graphique √©volution signatures
router.get('/charts/signatures-evolution', verifyAdmin, async (req, res) => {
  try {
    const evolution = await pool.query(`
      SELECT 
        DATE(created_at) as date,
        SUM(COALESCE(total_signatures, signatures, 0)) as signatures,
        COUNT(*) as scans
      FROM scans 
      WHERE created_at >= CURRENT_DATE - INTERVAL '30 days'
      GROUP BY DATE(created_at)
      ORDER BY date ASC
    `);

    const chartData = evolution.rows.map(row => ({
      date: row.date.toISOString().split('T')[0],
      signatures: parseInt(row.signatures) || 0,
      scans: parseInt(row.scans) || 0
    }));

    res.json(chartData);

  } catch (error) {
    console.error('‚ùå Erreur graphique √©volution:', error);
    res.status(500).json({ message: 'Erreur donn√©es graphique' });
  }
});

// Fonction utilitaire pour "il y a X temps"
function getTimeAgo(date) {
  if (!date) return 'Jamais';
  
  const now = new Date();
  const diff = now - new Date(date);
  const minutes = Math.floor(diff / 60000);
  const hours = Math.floor(diff / 3600000);
  const days = Math.floor(diff / 86400000);

  if (minutes < 1) return '√Ä l\'instant';
  if (minutes < 60) return `Il y a ${minutes}min`;
  if (hours < 24) return `Il y a ${hours}h`;
  if (days < 30) return `Il y a ${days}j`;
  return `Il y a ${Math.floor(days/30)}mois`;
}

module.exports = router;
