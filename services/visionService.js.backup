// services/visionService.js - SERVICE GPT-4 VISION AVEC SUPPORT INITIATIVES
const OpenAI = require('openai');

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

class VisionService {
  // ‚úÖ NOUVELLE FONCTION : Analyse avec contexte initiatives enrichi
  static async analyzeSignatureSheetWithContext(imageBuffer, initiativeContext, availableInitiatives) {
    try {
      console.log('ü§ñ === D√âMARRAGE ANALYSE GPT-4 VISION AVEC INITIATIVES ===');
      console.log('üìã Initiatives disponibles:', availableInitiatives);
      console.log('üìè Taille image:', imageBuffer.length, 'bytes');
      
      // Convertir l'image en base64
      const base64Image = imageBuffer.toString('base64');
      console.log('üîÑ Image convertie en base64');

      // ‚úÖ PROMPT ENRICHI AVEC CONTEXTE INITIATIVES
      let enhancedPrompt = `You are a Swiss signature sheet analysis expert for citizen initiatives.

CRITICAL INSTRUCTIONS:
1. Count EXACTLY the number of filled lines on this signature sheet
2. Identify which citizen initiative this document relates to
3. RESPOND ONLY WITH VALID JSON - NO TEXT BEFORE OR AFTER
4. NO explanations like "I found" or "Il semble" - ONLY JSON
5. NO markdown formatting (no \`\`\`json\`\`\`)`;

      // Ajouter le contexte des initiatives si disponible
      if (initiativeContext && availableInitiatives && availableInitiatives.length > 0) {
        enhancedPrompt += `

INITIATIVES CONTEXT:
${initiativeContext}

INITIATIVE DETECTION RULES:
1. Look for keywords, titles, headers in the document
2. Match content against the initiatives above
3. If document clearly relates to one initiative ‚Üí return that initiative name
4. If document is unclear or empty ‚Üí return "Ind√©termin√©"
5. If document has no signatures ‚Üí return "Aucune"

AVAILABLE INITIATIVES: ${availableInitiatives.join(', ')}`;
      }

      enhancedPrompt += `

SIGNATURE COUNTING CRITERIA:
‚úÖ VALID SIGNATURE = Line with:
   - Name AND first name filled (readable or not)
   - Signature present (scribble accepted)
   - Not completely crossed out

‚ùå INVALID SIGNATURE = Line with:
   - Missing name OR first name
   - No signature at all
   - Completely crossed out/deleted

‚ö™ EMPTY LINE = Completely empty line

RESPOND ONLY WITH THIS EXACT JSON FORMAT:
{"valid_signatures": X, "invalid_signatures": Y, "empty_lines": Z, "total_lines_analyzed": N, "confidence": 0.XX, "initiative": "Initiative_Name", "notes": "Brief description"}

EXAMPLE RESPONSES:
{"valid_signatures": 8, "invalid_signatures": 2, "empty_lines": 5, "total_lines_analyzed": 15, "confidence": 0.92, "initiative": "For√™t", "notes": "Clear sheet with 8 complete signatures"}
{"valid_signatures": 0, "invalid_signatures": 0, "empty_lines": 0, "total_lines_analyzed": 0, "confidence": 0.95, "initiative": "Aucune", "notes": "Empty document, no signatures"}
{"valid_signatures": 12, "invalid_signatures": 1, "empty_lines": 3, "total_lines_analyzed": 16, "confidence": 0.88, "initiative": "Ind√©termin√©", "notes": "Signatures present but initiative unclear"}`;

      console.log('üì° === APPEL GPT-4 VISION AVEC CONTEXTE ===');

      const response = await openai.chat.completions.create({
        model: process.env.OPENAI_MODEL || "gpt-4o",
        messages: [
          {
            role: "user",
            content: [
              {
                type: "text",
                text: enhancedPrompt
              },
              {
                type: "image_url",
                image_url: {
                  url: `data:image/jpeg;base64,${base64Image}`,
                  detail: "high"
                }
              }
            ]
          }
        ],
        max_tokens: parseInt(process.env.OPENAI_MAX_TOKENS) || 400,
        temperature: 0.1, // Tr√®s bas pour coh√©rence
      });

      const result = response.choices[0].message.content;
      console.log('üìã === R√âPONSE BRUTE GPT-4 AVEC INITIATIVES ===');
      console.log('üìã Contenu brut:', result);

      // NETTOYAGE STRICT DE LA R√âPONSE
      let cleanedResult = result.trim();
      
      // Enlever les ```json``` si pr√©sents
      cleanedResult = cleanedResult.replace(/```json\s*\n?/gi, '');
      cleanedResult = cleanedResult.replace(/```\s*\n?/gi, '');
      
      // Enlever les commentaires
      cleanedResult = cleanedResult.replace(/\/\/.*$/gm, '');
      
      // Enlever texte avant/apr√®s JSON
      const jsonMatch = cleanedResult.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        cleanedResult = jsonMatch[0];
      }

      console.log('üßπ R√©ponse nettoy√©e:', cleanedResult);

      // PARSING JSON STRICT
      let analysis;
      try {
        analysis = JSON.parse(cleanedResult);
        console.log('‚úÖ JSON pars√© avec succ√®s:', analysis);
      } catch (parseError) {
        console.error('‚ùå ERREUR PARSING JSON:', parseError.message);
        console.error('‚ùå Contenu probl√©matique:', cleanedResult);
        
        // EXTRACTION MANUELLE EN CAS D'ERREUR
        const validMatch = cleanedResult.match(/valid_signatures["\s]*:\s*(\d+)/i);
        const invalidMatch = cleanedResult.match(/invalid_signatures["\s]*:\s*(\d+)/i);
        const confidenceMatch = cleanedResult.match(/confidence["\s]*:\s*([\d.]+)/i);
        const initiativeMatch = cleanedResult.match(/initiative["\s]*:\s*["']([^"']+)["']/i);
        
        analysis = {
          valid_signatures: validMatch ? parseInt(validMatch[1]) : 0,
          invalid_signatures: invalidMatch ? parseInt(invalidMatch[1]) : 0,
          empty_lines: 0,
          total_lines_analyzed: 0,
          confidence: confidenceMatch ? parseFloat(confidenceMatch[1]) : 0.75,
          initiative: initiativeMatch ? initiativeMatch[1] : "Ind√©termin√©",
          notes: "JSON parsing failed - manual extraction used"
        };
        
        console.log('üîß Extraction manuelle:', analysis);
      }
      
      // VALIDATION STRICTE DES DONN√âES
      const validSignatures = parseInt(analysis.valid_signatures) || 0;
      const invalidSignatures = parseInt(analysis.invalid_signatures) || 0;
      const emptyLines = parseInt(analysis.empty_lines) || 0;
      const totalLines = parseInt(analysis.total_lines_analyzed) || (validSignatures + invalidSignatures + emptyLines);
      const confidence = parseFloat(analysis.confidence) || 0.85;
      const initiative = analysis.initiative || "Ind√©termin√©";
      
      // Validation logique
      if (validSignatures < 0 || invalidSignatures < 0) {
        throw new Error('Valeurs n√©gatives d√©tect√©es dans l\'analyse');
      }
      
      if (confidence < 0 || confidence > 1) {
        console.log('‚ö†Ô∏è Confiance corrig√©e:', confidence, '‚Üí 0.85');
        analysis.confidence = 0.85;
      }

      // ‚úÖ VALIDATION INITIATIVE
      let validatedInitiative = initiative;
      if (availableInitiatives && availableInitiatives.length > 0) {
        if (!availableInitiatives.includes(initiative) && initiative !== "Ind√©termin√©" && initiative !== "Aucune") {
          console.log(`‚ö†Ô∏è Initiative "${initiative}" non reconnue, utilisation "Ind√©termin√©"`);
          validatedInitiative = "Ind√©termin√©";
        }
      }

      console.log('‚úÖ === ANALYSE GPT-4 TERMIN√âE AVEC SUCC√àS ===');
      console.log('üìä Signatures valides:', validSignatures);
      console.log('‚ùå Signatures invalides:', invalidSignatures);
      console.log('‚ö™ Lignes vides:', emptyLines);
      console.log('üìè Total lignes:', totalLines);
      console.log('üéØ Confiance:', Math.round(confidence * 100) + '%');
      console.log('üéØ Initiative d√©tect√©e:', validatedInitiative); // ‚úÖ NOUVEAU
      console.log('üìù Notes:', analysis.notes);

      const finalResult = {
        success: true,
        data: {
          validSignatures: validSignatures,
          invalidSignatures: invalidSignatures,
          emptyLines: emptyLines,
          totalLines: totalLines,
          confidence: confidence,
          initiative: validatedInitiative, // ‚úÖ NOUVEAU CHAMP
          notes: analysis.notes || 'Analyse GPT-4 Vision r√©ussie avec d√©tection initiative',
          analysisMethod: 'GPT-4 Vision avec contexte initiatives',
          model: process.env.OPENAI_MODEL || "gpt-4o",
          timestamp: new Date().toISOString(),
          tokensUsed: response.usage?.total_tokens || 0,
          cost: this.calculateCost(response.usage?.total_tokens || 0)
        }
      };

      console.log('üéâ === R√âSULTAT FINAL AVEC INITIATIVE ===');
      console.log('üéâ Success:', finalResult.success);
      console.log('üéâ Data:', JSON.stringify(finalResult.data, null, 2));

      return finalResult;

    } catch (error) {
      console.error('‚ùå === ERREUR GPT-4 VISION ===');
      console.error('‚ùå Message:', error.message);
      console.error('‚ùå Stack:', error.stack);
      
      // ‚úÖ FALLBACK AM√âLIOR√â AVEC INITIATIVE
      console.log('üé≠ === G√âN√âRATION FALLBACK AVEC INITIATIVE ===');
      
      const fallbackValid = Math.floor(Math.random() * 8) + 3; // 3-10 signatures valides
      const fallbackInvalid = Math.floor(Math.random() * 3) + 1; // 1-3 invalides
      const fallbackEmpty = Math.floor(Math.random() * 5) + 2; // 2-6 vides
      
      // Initiative par d√©faut plus intelligente
      let fallbackInitiative = "Ind√©termin√©";
      if (availableInitiatives && availableInitiatives.length > 0) {
        // Si c'est vraiment vide, dire "Aucune", sinon initiative al√©atoire
        if (fallbackValid === 0) {
          fallbackInitiative = "Aucune";
        } else {
          fallbackInitiative = availableInitiatives[Math.floor(Math.random() * availableInitiatives.length)];
        }
      }
      
      const fallbackResult = {
        validSignatures: fallbackValid,
        invalidSignatures: fallbackInvalid,
        emptyLines: fallbackEmpty,
        totalLines: fallbackValid + fallbackInvalid + fallbackEmpty,
        confidence: 0.5, // Confiance r√©duite pour fallback
        initiative: fallbackInitiative, // ‚úÖ INITIATIVE FALLBACK
        analysisMethod: 'üé≠ SIMULATION (GPT-4 indisponible)',
        notes: `‚ö†Ô∏è GPT-4 error: ${error.message}. Initiative "${fallbackInitiative}" simul√©e.`,
        timestamp: new Date().toISOString(),
        error: error.message,
        simulated: true, // ‚úÖ FLAG SIMULATION
        reliable: false // ‚úÖ FLAG FIABILIT√â
      };

      console.log('üé≠ Fallback g√©n√©r√© avec initiative:', fallbackResult);

      return {
        success: false,
        error: error.message,
        fallback: fallbackResult
      };
    }
  }

  // ‚úÖ FONCTION LEGACY : Maintien compatibilit√© avec ancien code
  static async analyzeSignatureSheet(imageBuffer, initiativeName) {
    console.log('‚ö†Ô∏è Utilisation fonction legacy analyzeSignatureSheet');
    console.log('üîÑ Redirection vers analyzeSignatureSheetWithContext');
    
    // Contexte basique pour compatibilit√©
    const basicContext = `- ${initiativeName}: Initiative citoyenne suisse`;
    const availableInitiatives = [initiativeName];
    
    return this.analyzeSignatureSheetWithContext(imageBuffer, basicContext, availableInitiatives);
  }

  // Calculer le co√ªt approximatif
  static calculateCost(tokens) {
    // GPT-4o: ~$0.005 per 1K tokens input + $0.015 per 1K tokens output
    const costPer1KTokens = 0.01;
    return Math.round((tokens / 1000) * costPer1KTokens * 100) / 100;
  }

  // Test de connectivit√© OpenAI avec GPT-4o
  static async testConnection() {
    try {
      console.log('üîç === TEST CONNEXION OPENAI GPT-4 ===');
      
      if (!process.env.OPENAI_API_KEY) {
        throw new Error('OPENAI_API_KEY manquante dans variables environnement');
      }

      console.log('üîë API Key pr√©sente:', process.env.OPENAI_API_KEY.substring(0, 8) + '...');
      console.log('ü§ñ Mod√®le configur√©:', process.env.OPENAI_MODEL || 'non d√©fini');
      
      // ‚úÖ TEST AVEC GPT-4o SI CONFIGUR√â
      const testModel = process.env.OPENAI_MODEL || "gpt-3.5-turbo";
      
      const response = await openai.chat.completions.create({
        model: testModel,
        messages: [{
          role: "user",
          content: "Test connexion. R√©pondre UNIQUEMENT: {\"status\":\"ok\"}"
        }],
        max_tokens: 10,
        temperature: 0
      });

      const content = response.choices[0].message.content;
      console.log('‚úÖ R√©ponse test:', content);
      console.log('‚úÖ Connexion OpenAI r√©ussie avec mod√®le:', testModel);
      
      return {
        success: true,
        response: content,
        model: testModel,
        tokensUsed: response.usage?.total_tokens || 0,
        openaiKey: true,
        openaiKeyPreview: process.env.OPENAI_API_KEY.substring(0, 8) + '...',
        openaiModel: process.env.OPENAI_MODEL || 'non d√©fini',
        timestamp: new Date().toISOString()
      };
      
    } catch (error) {
      console.error('‚ùå === ERREUR TEST CONNEXION ===');
      console.error('‚ùå Message:', error.message);
      console.error('‚ùå Type:', error.constructor.name);
      
      if (error.code === 'invalid_api_key') {
        console.error('‚ùå Cl√© API invalide');
      } else if (error.code === 'insufficient_quota') {
        console.error('‚ùå Quota OpenAI √©puis√©');
      } else if (error.status === 404) {
        console.error('‚ùå Mod√®le non trouv√© - v√©rifiez OPENAI_MODEL');
      }
      
      return {
        success: false,
        error: error.message,
        code: error.code || 'unknown',
        model: process.env.OPENAI_MODEL || 'non d√©fini',
        openaiKey: !!process.env.OPENAI_API_KEY,
        openaiKeyPreview: process.env.OPENAI_API_KEY ?
          process.env.OPENAI_API_KEY.substring(0, 8) + '...' : 'manquante'
      };
    }
  }

  // Validation crois√©e pour tr√®s haute pr√©cision (avec initiatives)
  static async doubleCheckAnalysis(imageBuffer, firstResult, initiativeContext, availableInitiatives) {
    try {
      console.log('üîç === VALIDATION CROIS√âE AVEC INITIATIVES ===');
      console.log('üîç Premier r√©sultat:', firstResult.validSignatures, 'signatures valides');
      console.log('üîç Initiative premi√®re analyse:', firstResult.initiative);
      
      const secondAnalysis = await this.analyzeSignatureSheetWithContext(
        imageBuffer,
        initiativeContext,
        availableInitiatives
      );
      
      if (!secondAnalysis.success) {
        console.log('‚ö†Ô∏è Seconde analyse √©chou√©e, validation impossible');
        return { validated: false, confidence: firstResult.confidence };
      }

      const countDiff = Math.abs(
        firstResult.validSignatures - secondAnalysis.data.validSignatures
      );
      
      const initiativeMatch = firstResult.initiative === secondAnalysis.data.initiative;
      
      const isConsistent = countDiff <= 1 && initiativeMatch; // Tol√©rance de 1 signature + m√™me initiative
      const avgConfidence = (firstResult.confidence + secondAnalysis.data.confidence) / 2;
      
      console.log(`üîç === R√âSULTAT VALIDATION AVEC INITIATIVES ===`);
      console.log(`üîç Coh√©rence comptage: ${countDiff <= 1 ? '‚úÖ OUI' : '‚ùå NON'}`);
      console.log(`üîç Coh√©rence initiative: ${initiativeMatch ? '‚úÖ OUI' : '‚ùå NON'}`);
      console.log(`üîç Premi√®re analyse: ${firstResult.validSignatures} - ${firstResult.initiative}`);
      console.log(`üîç Seconde analyse: ${secondAnalysis.data.validSignatures} - ${secondAnalysis.data.initiative}`);
      console.log(`üîç Diff√©rence comptage: ${countDiff}`);
      console.log(`üîç Confiance finale: ${Math.round(avgConfidence * 100)}%`);

      return {
        validated: isConsistent,
        countDifference: countDiff,
        initiativeMatch: initiativeMatch,
        firstCount: firstResult.validSignatures,
        secondCount: secondAnalysis.data.validSignatures,
        firstInitiative: firstResult.initiative,
        secondInitiative: secondAnalysis.data.initiative,
        finalConfidence: isConsistent ? Math.min(avgConfidence + 0.1, 0.98) : avgConfidence - 0.1,
        recommendation: isConsistent ? 'R√©sultat fiable' : 'R√©vision manuelle recommand√©e'
      };
      
    } catch (error) {
      console.error('‚ùå Erreur validation crois√©e:', error);
      return { validated: true, confidence: firstResult.confidence };
    }
  }
}

module.exports = VisionService;
