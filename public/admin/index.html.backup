<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>KOLECT Admin - Dashboard</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #4ECDC4 0%, #35A085 100%);
            min-height: 100vh;
        }
        
        .admin-container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        
        .admin-header {
            background: white;
            border-radius: 12px;
            padding: 20px;
            margin-bottom: 20px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.1);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .logo {
            font-size: 28px;
            font-weight: bold;
            color: #4ECDC4;
        }
        
        .admin-info {
            display: flex;
            align-items: center;
            gap: 15px;
        }
        
        .logout-btn {
            background: #E74C3C;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 8px;
            cursor: pointer;
            font-weight: bold;
        }
        
        .logout-btn:hover {
            background: #C0392B;
        }
        
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .stat-card {
            background: white;
            border-radius: 12px;
            padding: 25px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.1);
            text-align: center;
            transition: transform 0.2s ease;
        }
        
        .stat-card:hover {
            transform: translateY(-5px);
        }
        
        .stat-number {
            font-size: 36px;
            font-weight: bold;
            color: #4ECDC4;
            margin-bottom: 10px;
        }
        
        .stat-label {
            font-size: 16px;
            color: #2C3E50;
            font-weight: 500;
        }
        
        .quick-actions {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin-bottom: 30px;
        }
        
        .action-btn {
            background: white;
            border: 2px solid #4ECDC4;
            color: #4ECDC4;
            padding: 15px 20px;
            border-radius: 10px;
            cursor: pointer;
            font-weight: bold;
            text-decoration: none;
            text-align: center;
            transition: all 0.2s ease;
        }
        
        .action-btn:hover {
            background: #4ECDC4;
            color: white;
        }
        
        .recent-activity {
            background: white;
            border-radius: 12px;
            padding: 25px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.1);
        }
        
        .recent-title {
            font-size: 20px;
            font-weight: bold;
            color: #2C3E50;
            margin-bottom: 20px;
        }
        
        .activity-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 12px 0;
            border-bottom: 1px solid #ECF0F1;
        }
        
        .activity-item:last-child {
            border-bottom: none;
        }
        
        .activity-text {
            color: #2C3E50;
        }
        
        .activity-time {
            color: #7F8C8D;
            font-size: 14px;
        }
        
        .hidden {
            display: none;
        }
        
        .login-form {
            max-width: 400px;
            margin: 100px auto;
            background: white;
            padding: 40px;
            border-radius: 12px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.1);
        }
        
        .form-title {
            text-align: center;
            font-size: 24px;
            font-weight: bold;
            color: #2C3E50;
            margin-bottom: 30px;
        }
        
        .form-group {
            margin-bottom: 20px;
        }
        
        .form-label {
            display: block;
            margin-bottom: 8px;
            font-weight: bold;
            color: #2C3E50;
        }
        
        .form-input {
            width: 100%;
            padding: 12px;
            border: 2px solid #ECF0F1;
            border-radius: 8px;
            font-size: 16px;
            transition: border-color 0.2s ease;
        }
        
        .form-input:focus {
            outline: none;
            border-color: #4ECDC4;
        }
        
        .form-btn {
            width: 100%;
            background: #4ECDC4;
            color: white;
            border: none;
            padding: 15px;
            border-radius: 8px;
            font-size: 16px;
            font-weight: bold;
            cursor: pointer;
            transition: background 0.2s ease;
        }
        
        .form-btn:hover {
            background: #35A085;
        }
        
        .error-message {
            background: #E74C3C;
            color: white;
            padding: 10px;
            border-radius: 5px;
            margin-bottom: 15px;
            text-align: center;
        }

        .page-title {
            font-size: 24px;
            font-weight: bold;
            color: white;
            margin-bottom: 20px;
            text-align: center;
        }

        .users-grid {
            display: grid;
            gap: 15px;
        }

        .user-card {
            background: white;
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }

        .user-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }

        .user-name {
            font-size: 18px;
            font-weight: bold;
            color: #2C3E50;
        }

        .user-email {
            color: #7F8C8D;
            font-size: 14px;
        }

        .user-stats {
            display: flex;
            gap: 20px;
            margin-top: 10px;
        }

        .user-stat {
            text-align: center;
        }

        .user-stat-number {
            font-size: 20px;
            font-weight: bold;
            color: #4ECDC4;
        }

        .user-stat-label {
            font-size: 12px;
            color: #7F8C8D;
        }

        .status-badge {
            padding: 4px 12px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: bold;
        }

        .status-active {
            background: #D5EDDA;
            color: #155724;
        }

        .status-suspended {
            background: #F8D7DA;
            color: #721C24;
        }

        .btn-sm {
            padding: 6px 12px;
            font-size: 12px;
            border-radius: 6px;
            border: none;
            cursor: pointer;
            margin-left: 5px;
        }

        .btn-warning {
            background: #FFC107;
            color: #000;
        }

        .btn-success {
            background: #28A745;
            color: white;
        }
    </style>
</head>
<body>
    <!-- LOGIN FORM -->
    <div id="loginForm" class="login-form">
        <div class="form-title">üîê KOLECT Admin</div>
        <div id="errorMessage" class="error-message hidden"></div>
        
        <form onsubmit="handleLogin(event)">
            <div class="form-group">
                <label class="form-label">Email</label>
                <input type="email" class="form-input" id="email" required value="admin@kolect.ch">
            </div>
            
            <div class="form-group">
                <label class="form-label">Mot de passe</label>
                <input type="password" class="form-input" id="password" required placeholder="Devcom20!">
            </div>
            
            <button type="submit" class="form-btn">Se connecter</button>
        </form>
    </div>

    <!-- ADMIN DASHBOARD -->
    <div id="adminDashboard" class="admin-container hidden">
        <!-- Header -->
        <div class="admin-header">
            <div class="logo">KOLECT Admin</div>
            <div class="admin-info">
                <span id="adminName">Admin</span>
                <button class="logout-btn" onclick="handleLogout()">D√©connexion</button>
            </div>
        </div>

        <!-- Navigation -->
        <div class="quick-actions">
            <button class="action-btn" onclick="showDashboard()">üìä Dashboard</button>
            <button class="action-btn" onclick="showUsers()">üë• Collaborateurs</button>
            <button class="action-btn" onclick="exportData()">‚¨áÔ∏è Export</button>
        </div>

        <!-- Dashboard View -->
        <div id="dashboardView">
            <!-- Statistics -->
            <div class="stats-grid">
                <div class="stat-card">
                    <div class="stat-number" id="totalSignatures">0</div>
                    <div class="stat-label">Signatures totales</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number" id="activeCollaborators">0</div>
                    <div class="stat-label">Collaborateurs</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number" id="averageQuality">0%</div>
                    <div class="stat-label">Qualit√© moyenne</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number" id="todayScans">0</div>
                    <div class="stat-label">Scans aujourd'hui</div>
                </div>
            </div>

            <!-- Recent Activity -->
            <div class="recent-activity">
                <div class="recent-title">üïí Activit√© r√©cente</div>
                <div id="recentActivity">
                    <!-- Charg√© dynamiquement -->
                </div>
            </div>
        </div>

        <!-- Users View -->
        <div id="usersView" class="hidden">
            <div class="page-title">üë• Gestion des Collaborateurs</div>
            <div id="usersList" class="users-grid">
                <!-- Charg√© dynamiquement -->
            </div>
        </div>
    </div>

    <script>
        const API_URL = 'http://localhost:3000';
        let authToken = localStorage.getItem('adminToken');

        document.addEventListener('DOMContentLoaded', function() {
            if (authToken) {
                verifyToken();
            } else {
                showLogin();
            }
        });

        async function handleLogin(event) {
            event.preventDefault();
            console.log('üîê Tentative de connexion...');
            
            const email = document.getElementById('email').value;
            const password = document.getElementById('password').value;
            
            try {
                console.log('üì° Envoi requ√™te vers:', API_URL + '/api/admin/auth/login');
                
                const response = await fetch(API_URL + '/api/admin/auth/login', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ email, password })
                });
                
                console.log('üì° R√©ponse re√ßue:', response.status);
                const data = await response.json();
                console.log('üìä Donn√©es:', data);
                
                if (response.ok) {
                    localStorage.setItem('adminToken', data.token);
                    authToken = data.token;
                    showDashboard();
                    loadDashboardData(data.admin);
                } else {
                    showError(data.message);
                }
            } catch (error) {
                console.error('‚ùå Erreur:', error);
                showError('Erreur de connexion au serveur');
            }
        }

        async function verifyToken() {
            try {
                const response = await fetch(API_URL + '/api/admin/auth/verify', {
                    headers: { 'Authorization': 'Bearer ' + authToken }
                });
                
                if (response.ok) {
                    const data = await response.json();
                    showDashboard();
                    loadDashboardData(data.admin);
                } else {
                    showLogin();
                }
            } catch (error) {
                showLogin();
            }
        }

        async function loadDashboardData(admin) {
            document.getElementById('adminName').textContent = admin.name;
            await loadStats();
            await loadRecentActivity();
        }

        async function loadStats() {
            try {
                const response = await fetch(API_URL + '/api/admin/dashboard/stats', {
                    headers: { 'Authorization': 'Bearer ' + authToken }
                });
                
                if (response.ok) {
                    const stats = await response.json();
                    
                    document.getElementById('totalSignatures').textContent = stats.totalSignatures || 0;
                    document.getElementById('activeCollaborators').textContent = stats.activeCollaborators || 0;
                    document.getElementById('averageQuality').textContent = (stats.averageQuality || 0) + '%';
                    document.getElementById('todayScans').textContent = stats.todayScans || 0;
                }
            } catch (error) {
                console.error('Erreur chargement stats:', error);
            }
        }

        async function loadRecentActivity() {
            try {
                const response = await fetch(API_URL + '/api/admin/dashboard/recent-activity', {
                    headers: { 'Authorization': 'Bearer ' + authToken }
                });
                
                if (response.ok) {
                    const activities = await response.json();
                    const container = document.getElementById('recentActivity');
                    
                    container.innerHTML = activities.map(activity =>
                        '<div class="activity-item">' +
                            '<span class="activity-text">' +
                                activity.collaborator_name + ' - ' + activity.total_signatures + ' signatures (' + activity.initiative + ')' +
                            '</span>' +
                            '<span class="activity-time">' +
                                new Date(activity.created_at).toLocaleDateString('fr-FR') +
                            '</span>' +
                        '</div>'
                    ).join('');
                }
            } catch (error) {
                console.error('Erreur activit√© r√©cente:', error);
            }
        }

        async function loadUsers() {
            try {
                const response = await fetch(API_URL + '/api/admin/users', {
                    headers: { 'Authorization': 'Bearer ' + authToken }
                });
                
                if (response.ok) {
                    const users = await response.json();
                    const container = document.getElementById('usersList');
                    
                    container.innerHTML = users.map(user => {
                        const suspendBtn = '<button class="btn-sm btn-warning" onclick="changeUserStatus(' + user.id + ', &quot;suspended&quot;)">Suspendre</button>';
                        const activateBtn = '<button class="btn-sm btn-success" onclick="changeUserStatus(' + user.id + ', &quot;active&quot;)">Activer</button>';
                        
                        return '<div class="user-card">' +
                            '<div class="user-header">' +
                                '<div>' +
                                    '<div class="user-name">' + user.name + '</div>' +
                                    '<div class="user-email">' + user.email + '</div>' +
                                '</div>' +
                                '<div>' +
                                    '<span class="status-badge status-' + user.status + '">' + user.status + '</span>' +
                                    (user.status === 'active' ? suspendBtn : activateBtn) +
                                '</div>' +
                            '</div>' +
                            '<div class="user-stats">' +
                                '<div class="user-stat">' +
                                    '<div class="user-stat-number">' + user.stats.totalSignatures + '</div>' +
                                    '<div class="user-stat-label">Signatures</div>' +
                                '</div>' +
                                '<div class="user-stat">' +
                                    '<div class="user-stat-number">' + user.stats.totalScans + '</div>' +
                                    '<div class="user-stat-label">Scans</div>' +
                                '</div>' +
                                '<div class="user-stat">' +
                                    '<div class="user-stat-number">' + user.stats.avgQuality + '%</div>' +
                                    '<div class="user-stat-label">Qualit√©</div>' +
                                '</div>' +
                            '</div>' +
                        '</div>';
                    }).join('');
                }
            } catch (error) {
                console.error('Erreur chargement collaborateurs:', error);
            }
        }

        async function changeUserStatus(userId, newStatus) {
            try {
                const response = await fetch(API_URL + '/api/admin/users/' + userId + '/status', {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': 'Bearer ' + authToken
                    },
                    body: JSON.stringify({ status: newStatus })
                });
                
                if (response.ok) {
                    await loadUsers();
                } else {
                    alert('Erreur changement statut');
                }
            } catch (error) {
                console.error('Erreur:', error);
                alert('Erreur de connexion');
            }
        }

        function showView(viewId) {
            ['dashboardView', 'usersView'].forEach(id => {
                document.getElementById(id).classList.add('hidden');
            });
            document.getElementById(viewId).classList.remove('hidden');
        }

        function showDashboard() {
            document.getElementById('loginForm').classList.add('hidden');
            document.getElementById('adminDashboard').classList.remove('hidden');
            showView('dashboardView');
        }

        function showUsers() {
            showView('usersView');
            loadUsers();
        }

        function showLogin() {
            document.getElementById('loginForm').classList.remove('hidden');
            document.getElementById('adminDashboard').classList.add('hidden');
        }

        function showError(message) {
            const errorDiv = document.getElementById('errorMessage');
            errorDiv.textContent = message;
            errorDiv.classList.remove('hidden');
        }

        function handleLogout() {
            localStorage.removeItem('adminToken');
            authToken = null;
            showLogin();
        }

        function exportData() {
            alert('Export en d√©veloppement - Prochaine version !');
        }
    </script>
</body>
</html>
